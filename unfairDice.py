
import random


def biased_rolls(prob_list, s, n):
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results.

    Arguments:
        prob_list: a list of the probabilities of rolling the
                   number on each side of the m-sided die. The list
                   will always have the length m (m >= 2), where m is
                   the number of sides numbered 1 to m. Therefore,
                   for example, the probability stored at index 0 in
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the
               biased die, in the order they were generated.
    """
    rolls= []
    # uses s as the seed to the random function
    random.seed(s)
    start= 0
    # created a list called list01 to map the fractions from 0-1
    list01= []
    # this for loop keeps adding each element from prob_list
    # and then appends it to list01
    for i in prob_list:
        start+= i
        list01.append(start)

    # this for loop randomly generates float numbers from (0,1] using
    # the random.random() function using the seed inputted,
    # and appnds to the rolls list accordingly.
    for j in range(0, n):
        a= random.random()
        for k in range(len(list01)):
            if a<= list01[k]:
                rolls.append(k+1)
                break
            else:
                pass
    # return the resulting rolls
    return rolls

def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """
    # this list is initialized which will further be used 
    # to append the count values.
    list02=[]
    print(f"Frequency Histogram: {m}-sided Die")

    # this counts the number of times each number in the list[rolls] is repeated.
    # and then appends the count to the list[list02]
    for i in range(0,m):
        count= 0
        for j in rolls:
            if (i+1)== j:
                count+= 1
            else:
                pass
        list02.append(count)

     # this if statement checks if the max in list 02 is equal to the count
     # if yes then it just subtracts and print normally   
    if max(list02)== width:
        for j in range(len(list02)):
            print(f"{j+1}.", end="")
            print("#"*list02[j], end="")
            print("-"*(width-list02[j]), end="")
            print()
    # else it prints according to the width and uses the multipilcation factor
    # (width/max(list02)))
    else:
        for j in range(len(list02)):
            print(f"{j+1}.", end="")
            print("#"*round(list02[j]*(width/max(list02))), end="")
            print("-"*round((width-(list02[j]*(width/max(list02))))), end="")
            print()
    

    # this function should print to standard output
    # you should not return anything!


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
    pass
    rolls = biased_rolls([1/4, 1/6, 1/12, 1/12, 1/4, 1/6], 42, 200)
    draw_histogram(6, rolls, 10)